(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[40],{157:(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>a});var s=i(5155),r=i(6874),n=i.n(r);function a(){return(0,s.jsx)("main",{className:"min-h-screen bg-gradient-to-b from-[#0b0f1a] to-black text-white",children:(0,s.jsxs)("div",{className:"mx-auto max-w-5xl px-6 py-12",children:[(0,s.jsxs)("header",{className:"mb-8 flex items-center justify-between",children:[(0,s.jsx)(n(),{href:"/",className:"text-xl font-semibold tracking-tight",children:"CERTHUB"}),(0,s.jsx)("div",{className:"text-sm",children:(0,s.jsx)("span",{className:"rounded-md bg-emerald-500/10 px-3 py-1 text-emerald-300",children:"Documentation"})})]}),(0,s.jsxs)("section",{className:"mb-10",children:[(0,s.jsx)("h1",{className:"text-3xl font-bold sm:text-4xl",children:"CERTHUB Documentation"}),(0,s.jsx)("p",{className:"mt-2 text-white/70",children:"CERTHUB is a blockchain-based platform for issuing, claiming, and verifying certificates on the Hyperion Explorer. This documentation covers the smart contract functionality, user interface workflows, input requirements, and precautions for users."})]}),(0,s.jsxs)("section",{className:"mb-12",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Table of Contents"}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70",children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"#overview",className:"hover:underline text-emerald-400",children:"Overview"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"#smart-contracts",className:"hover:underline text-emerald-400",children:"Smart Contract Functions"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"#ui-workflows",className:"hover:underline text-emerald-400",children:"UI Workflows"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"#input-guidelines",className:"hover:underline text-emerald-400",children:"Input Guidelines"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"#precautions",className:"hover:underline text-emerald-400",children:"Precautions"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"#fetching-data",className:"hover:underline text-emerald-400",children:"Fetching Data"})})]})]}),(0,s.jsxs)("section",{id:"overview",className:"mb-12 rounded-xl border border-white/10 bg-white/5 p-6",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Overview"}),(0,s.jsx)("p",{className:"text-white/70",children:"CERTHUB leverages the Hyperion Testnet to provide a secure, transparent, and tamper-proof system for certificate management. Institutions issue soulbound (non-transferable) certificates, recipients claim them using Merkle proofs, and anyone can verify claims or inspect certificate details. The platform ensures authenticity through institution verification and blockchain immutability."}),(0,s.jsx)("p",{className:"text-white/70 mt-2",children:"Key features include institution registration, certificate issuance and updates, claim verification, and profile management. The smart contracts enforce access control, while the UI provides an intuitive interface for all users."})]}),(0,s.jsxs)("section",{id:"smart-contracts",className:"mb-12 rounded-xl border border-white/10 bg-white/5 p-6",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Smart Contract Functions"}),(0,s.jsx)("p",{className:"text-white/70 mb-4",children:"The core functionality resides in the `CredentialsAndCertificatesFactoryContract` and `ICredentialsAndCertificatesImplementation` contracts, deployed on the Hyperion Testnet. Below are the primary functions:"}),(0,s.jsxs)("div",{className:"space-y-6",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"registerInstitution"}),(0,s.jsx)("p",{className:"text-white/70",children:"Registers a new institution, restricted to factory agents."}),(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:"function registerInstitution(\n  address institutionWalletAddress,\n  string calldata institutionName\n) public onlyFactoryAgent {\n  // Stores in verified_institutions mapping\n}"}),(0,s.jsxs)("p",{className:"text-white/70 mt-2",children:[(0,s.jsx)("strong",{children:"Inputs:"})," Institution wallet address (e.g., `0x123...`), institution name (e.g., `Harvard`).",(0,s.jsx)("br",{}),(0,s.jsx)("strong",{children:"Output:"})," Emits `InstitutionRegistered` event."]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"issueCertificate"}),(0,s.jsx)("p",{className:"text-white/70",children:"Issues a new certificate, restricted to verified institutions or admins."}),(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:"function issueCertificate(\n  address institutionWalletAddress,\n  string calldata institutionName,\n  string calldata certificateName,\n  string calldata certificateId,\n  string calldata uri,\n  uint256 certificateYear,\n  bytes32 merkleRoot,\n  uint256 certificateTokenQuantity\n) public onlyVerifiedInstitutionOrAdmin(institutionName, institutionWalletAddress) {\n  // Deploys certificate contract, stores in institution_certificates\n}"}),(0,s.jsxs)("p",{className:"text-white/70 mt-2",children:[(0,s.jsx)("strong",{children:"Inputs:"})," Institution wallet address, institution name, certificate name (e.g., `Bachelor of Science`), certificate ID (e.g., `CERT123`), URI (e.g., `ipfs://Qm...`), year (e.g., `2023`), Merkle root (32-byte hex), token quantity (e.g., `100`).",(0,s.jsx)("br",{}),(0,s.jsx)("strong",{children:"Output:"})," Emits `CertificateIssued` event."]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"updateCertificate"}),(0,s.jsx)("p",{className:"text-white/70",children:"Updates an existing certificate’s details, restricted to verified institutions or admins."}),(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:"function updateCertificate(\n  address institutionWalletAddress,\n  string calldata institutionName,\n  string calldata previousCertificateName,\n  string calldata certificateName,\n  string calldata certificateId,\n  string calldata uri,\n  uint256 previousCertificateYear,\n  uint256 newCertificateYear,\n  bytes32 merkleRoot,\n  uint256 certificateTokenUpdateQuantity\n) public onlyVerifiedInstitutionOrAdmin(institutionName, institutionWalletAddress) {\n  // Updates certificate details via institution_certificates mapping\n}"}),(0,s.jsxs)("p",{className:"text-white/70 mt-2",children:[(0,s.jsx)("strong",{children:"Inputs:"})," Institution wallet address, institution name, previous certificate name, new certificate name, certificate ID, URI, previous year, new year, Merkle root, token quantity.",(0,s.jsx)("br",{}),(0,s.jsx)("strong",{children:"Output:"})," Emits `CertificateUpdated` event."]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"verifyCertificate"}),(0,s.jsx)("p",{className:"text-white/70",children:"Verifies a recipient’s certificate claim, public function."}),(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:"function verifyCertificate(\n  address recipientAddress,\n  string calldata certificateName,\n  uint256 certificateYear,\n  address institutionWalletAddress\n) public view returns (Recipient memory details) {\n  // Returns Recipient struct with claim details\n}"}),(0,s.jsxs)("p",{className:"text-white/70 mt-2",children:[(0,s.jsx)("strong",{children:"Inputs:"})," Recipient address, certificate name, certificate year, institution wallet address.",(0,s.jsx)("br",{}),(0,s.jsx)("strong",{children:"Output:"})," `Recipient` struct (`RecipientName`, `CertificateName`, `CertificateYear`, `CertificateId`, `RecipientId`, `InstitutionName`, `Claimed`)."]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"claimCertificate (Assumed)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Allows recipients to claim a certificate using a Merkle proof."}),(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:"function claimCertificate(\n  address recipientAddress,\n  string calldata certificateId,\n  string calldata institutionName,\n  bytes32[] calldata merkleProof\n) public {\n  // Verifies Merkle proof and marks claim in certificate contract\n}"}),(0,s.jsxs)("p",{className:"text-white/70 mt-2",children:[(0,s.jsx)("strong",{children:"Inputs:"})," Recipient address, certificate ID, institution name, Merkle proof (array of 32-byte hex strings).",(0,s.jsx)("br",{}),(0,s.jsx)("strong",{children:"Output:"})," Emits `CertificateClaimed` event."]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"expandCertificateDetails (Assumed)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Retrieves detailed certificate information, public function."}),(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:"function expandCertificateDetails(\n  address institutionWalletAddress,\n  string calldata certificateName,\n  uint256 certificateYear\n) public view returns (string memory certificateId, string memory uri, bytes32 merkleRoot, uint256 tokenQuantity) {\n  // Returns certificate metadata\n}"}),(0,s.jsxs)("p",{className:"text-white/70 mt-2",children:[(0,s.jsx)("strong",{children:"Inputs:"})," Institution wallet address, certificate name, certificate year.",(0,s.jsx)("br",{}),(0,s.jsx)("strong",{children:"Output:"})," Certificate ID, URI, Merkle root, token quantity."]})]})]})]}),(0,s.jsxs)("section",{id:"ui-workflows",className:"mb-12 rounded-xl border border-white/10 bg-white/5 p-6",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"UI Workflows"}),(0,s.jsx)("p",{className:"text-white/70 mb-4",children:"The CERTHUB UI provides intuitive pages for interacting with the smart contracts. Below are the main workflows:"}),(0,s.jsxs)("div",{className:"space-y-6",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"Register Institution (/register)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Factory agents register institutions to allow them to issue certificates."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/register",className:"text-emerald-400 hover:underline",children:"/register"}),"."]}),(0,s.jsx)("li",{children:"Connect a factory agent wallet (e.g., `0x85E12F2100554D46b498D887a83ABBf9C42fF951`)."}),(0,s.jsx)("li",{children:"Enter institution wallet address and name."}),(0,s.jsx)("li",{children:"Submit to register the institution."})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"Issue Certificate (/issue)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Verified institutions or admins issue new certificates with Merkle proofs for recipients."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/issue",className:"text-emerald-400 hover:underline",children:"/issue"}),"."]}),(0,s.jsx)("li",{children:"Connect an institution admin wallet."}),(0,s.jsx)("li",{children:"Enter institution details, certificate details (name, ID, URI, year, token quantity), and recipient addresses."}),(0,s.jsx)("li",{children:"Generate a Merkle root and download proofs via the UI."}),(0,s.jsx)("li",{children:"Submit to deploy the certificate contract."})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"Update Certificate (/agent/update-certificate)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Verified institutions or admins update existing certificate details."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/agent/update-certificate",className:"text-emerald-400 hover:underline",children:"/agent/update-certificate"}),"."]}),(0,s.jsx)("li",{children:"Connect an institution admin wallet."}),(0,s.jsx)("li",{children:"Enter institution name, previous certificate details (name, year), and updated details (name, ID, URI, year, Merkle root, token quantity)."}),(0,s.jsx)("li",{children:"Optionally generate a new Merkle root and download proofs."}),(0,s.jsx)("li",{children:"Submit to update the certificate."})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"Claim Certificate (/claim)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Recipients claim their certificates using a Merkle proof."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/claim",className:"text-emerald-400 hover:underline",children:"/claim"}),"."]}),(0,s.jsx)("li",{children:"Connect the recipient’s wallet."}),(0,s.jsx)("li",{children:"Enter certificate ID, institution name, and upload or paste the Merkle proof."}),(0,s.jsx)("li",{children:"Submit to claim the certificate."})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"Verify Certificate Claim (/verify)"}),(0,s.jsx)("p",{className:"text-white/70",children:"Anyone can verify a recipient’s certificate claim."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/verify",className:"text-emerald-400 hover:underline",children:"/verify"}),"."]}),(0,s.jsx)("li",{children:"Enter institution wallet address, certificate name, certificate year, and recipient address."}),(0,s.jsx)("li",{children:"Submit to view claim details (e.g., Recipient Name, Certificate ID, Claimed status)."})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"Inspect Certificate (/inspect)"}),(0,s.jsx)("p",{className:"text-white/70",children:"View detailed certificate metadata."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/inspect",className:"text-emerald-400 hover:underline",children:"/inspect"}),"."]}),(0,s.jsx)("li",{children:"Enter institution wallet address, certificate name, and certificate year."}),(0,s.jsx)("li",{children:"Submit to view certificate details (e.g., ID, URI, Merkle root)."}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Note:"})," This feature may encounter issues (e.g., `CALL_EXCEPTION`); check logs for debugging."]})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("h3",{className:"text-lg font-semibold text-emerald-400",children:"View Profiles (/profile)"}),(0,s.jsx)("p",{className:"text-white/70",children:"View institution or recipient profiles, including issued or claimed certificates."}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 mt-2",children:[(0,s.jsxs)("li",{children:["Navigate to ",(0,s.jsx)(n(),{href:"/profile",className:"text-emerald-400 hover:underline",children:"/profile"}),"."]}),(0,s.jsx)("li",{children:"Connect a wallet to view your profile or enter an address to view another’s."}),(0,s.jsx)("li",{children:"Displays issued certificates (for institutions) or claimed certificates (for recipients)."})]})]})]})]}),(0,s.jsxs)("section",{id:"input-guidelines",className:"mb-12 rounded-xl border border-white/10 bg-white/5 p-6",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Input Guidelines"}),(0,s.jsx)("p",{className:"text-white/70 mb-4",children:"Accurate inputs are critical for successful contract interactions. Below are guidelines for each input type:"}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 space-y-2",children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Ethereum Addresses"})," (e.g., `institutionWalletAddress`, `recipientAddress`): Must be valid 40-character hexadecimal strings prefixed with `0x` (e.g., `0x1234567890abcdef1234567890abcdef12345678`). Use wallets like MetaMask."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Institution Name"}),": A string identifying the institution (e.g., `Harvard`). Must match the registered name exactly for restricted functions."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Certificate Name"}),": A string describing the certificate (e.g., `Bachelor of Science`). Case-sensitive and must match existing records for updates/verification."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Certificate ID"}),": A unique string identifier (e.g., `CERT123`). Avoid spaces or special characters unless supported."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"URI"}),": A link to certificate metadata, typically an IPFS URL (e.g., `ipfs://Qm...`). Ensure the link is accessible."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Certificate Year"}),": A positive integer (e.g., `2023`). Use four digits for consistency."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Merkle Root"}),": A 32-byte hexadecimal string prefixed with `0x` (e.g., `0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef`). Generated via the UI’s `/api/merkle` endpoint."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Merkle Proof"}),': An array of 32-byte hex strings (e.g., `["0x123...", "0x456..."]`). Upload a JSON file from `/issue` or `/update-certificate` or paste manually.']}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Token Quantity"}),": A positive integer (e.g., `100`). Represents the number of certificate tokens issued or updated."]})]})]}),(0,s.jsxs)("section",{id:"precautions",className:"mb-12 rounded-xl border border-white/10 bg-white/5 p-6",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Precautions"}),(0,s.jsx)("p",{className:"text-white/70 mb-4",children:"To ensure smooth interaction with CERTHUB, follow these precautions:"}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 space-y-2",children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Wallet Connection"}),": Connect a wallet via MetaMask for actions requiring transactions (e.g., `/register`, `/issue`, `/claim`, `/agent/update-certificate`). Ensure the wallet is on the Hyperion Testnet."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Network"}),": Switch to the Hyperion Testnet (RPC: `https://hyperion-testnet.metisdevops.link`) in MetaMask. Mismatched networks cause errors."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Access Control"}),": Only factory agents can access `/register`. Only verified institution admins can access `/issue` and `/agent/update-certificate`. Verify your wallet’s permissions via the contract’s `institution_admins` mapping."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Input Accuracy"}),": Double-check addresses, names, and years. Errors like “Certificate address lookup failed” occur if inputs don’t match contract records."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Merkle Proofs"}),": Ensure proofs match the certificate’s Merkle root. Use the downloaded JSON from `/issue` or `/update-certificate`."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Gas Fees"}),": Hyperion ."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Error Handling"}),": Common errors include “Certificate address lookup failed” (invalid certificate details), “Unauthorized” (access control), or `CALL_EXCEPTION` (contract issues). Check console logs for details."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Testing"}),": Use test data (e.g., factory agent `0x85E12F2100554D46b498D887a83ABBf9C42fF951`) on Hyperion Testnet to avoid real-world consequences."]})]})]}),(0,s.jsxs)("section",{id:"fetching-data",className:"mb-12 rounded-xl border border-white/10 bg-white/5 p-6",children:[(0,s.jsx)("h2",{className:"text-2xl font-semibold mb-4",children:"Fetching Data"}),(0,s.jsx)("p",{className:"text-white/70 mb-4",children:"CERTHUB allows users to retrieve certificate and claim data via public `view` functions and UI pages:"}),(0,s.jsxs)("ul",{className:"list-disc pl-5 text-white/70 space-y-2",children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Verify a Claim (/verify)"}),": Use `verifyCertificate` to check if a recipient has claimed a certificate. Returns a `Recipient` struct with details like `RecipientName`, `CertificateId`, and `Claimed` status."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Inspect Certificates (/inspect)"}),": Use `expandCertificateDetails` to retrieve certificate metadata (ID, URI, Merkle root, token quantity). Note: Debug `CALL_EXCEPTION` if errors occur."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Profiles (/profile)"}),": View issued or claimed certificates for an institution or recipient. Query `institution_certificates` or `claimedCertificates` mappings."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Contract Queries"}),": Use `ethers.js` or similar to call `view` functions directly:",(0,s.jsx)("pre",{className:"bg-black/50 p-4 rounded-lg text-sm text-white/80 mt-2",children:'const provider = new ethers.JsonRpcProvider("https://hyperion-testnet.metisdevops.link");\nconst contract = new ethers.Contract("0xC04b063F5Fd9F03B67359DE79d3b18a55f73cB0c", ABI, provider);\nconst details = await contract.verifyCertificate("0x123...", "Bachelor of Science", 2023, "0x456...");\nconsole.log(details); // Recipient struct\n'})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Event Logs"}),": Monitor events like `CertificateIssued`, `CertificateUpdated`, or `CertificateClaimed` using ethers.js or a blockchain explorer for transaction history."]})]})]}),(0,s.jsx)("div",{className:"mt-6",children:(0,s.jsx)(n(),{href:"/",className:"text-white/70 hover:underline",children:"Back to Home"})})]})})}},8337:(e,t,i)=>{Promise.resolve().then(i.bind(i,157))}},e=>{var t=t=>e(e.s=t);e.O(0,[874,441,684,358],()=>t(8337)),_N_E=e.O()}]);